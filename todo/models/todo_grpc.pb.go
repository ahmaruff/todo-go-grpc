// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: todo.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Todo_GetTodoItem_FullMethodName      = "/Todo/GetTodoItem"
	Todo_ListTodoItems_FullMethodName    = "/Todo/ListTodoItems"
	Todo_CreateTodoItem_FullMethodName   = "/Todo/CreateTodoItem"
	Todo_UpdateTodoItem_FullMethodName   = "/Todo/UpdateTodoItem"
	Todo_DeleteTodoItem_FullMethodName   = "/Todo/DeleteTodoItem"
	Todo_MakeTodoItemDone_FullMethodName = "/Todo/MakeTodoItemDone"
)

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoClient interface {
	GetTodoItem(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*TodoItem, error)
	ListTodoItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoItems, error)
	CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error)
	UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error)
	DeleteTodoItem(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MakeTodoItemDone(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type todoClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoClient(cc grpc.ClientConnInterface) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) GetTodoItem(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, Todo_GetTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) ListTodoItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TodoItems, error) {
	out := new(TodoItems)
	err := c.cc.Invoke(ctx, Todo_ListTodoItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) CreateTodoItem(ctx context.Context, in *CreateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, Todo_CreateTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) UpdateTodoItem(ctx context.Context, in *UpdateTodoItemRequest, opts ...grpc.CallOption) (*TodoItem, error) {
	out := new(TodoItem)
	err := c.cc.Invoke(ctx, Todo_UpdateTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) DeleteTodoItem(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Todo_DeleteTodoItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoClient) MakeTodoItemDone(ctx context.Context, in *TodoItemId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Todo_MakeTodoItemDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
// All implementations must embed UnimplementedTodoServer
// for forward compatibility
type TodoServer interface {
	GetTodoItem(context.Context, *TodoItemId) (*TodoItem, error)
	ListTodoItems(context.Context, *emptypb.Empty) (*TodoItems, error)
	CreateTodoItem(context.Context, *CreateTodoItemRequest) (*TodoItem, error)
	UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*TodoItem, error)
	DeleteTodoItem(context.Context, *TodoItemId) (*emptypb.Empty, error)
	MakeTodoItemDone(context.Context, *TodoItemId) (*emptypb.Empty, error)
	mustEmbedUnimplementedTodoServer()
}

// UnimplementedTodoServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (UnimplementedTodoServer) GetTodoItem(context.Context, *TodoItemId) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItem not implemented")
}
func (UnimplementedTodoServer) ListTodoItems(context.Context, *emptypb.Empty) (*TodoItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodoItems not implemented")
}
func (UnimplementedTodoServer) CreateTodoItem(context.Context, *CreateTodoItemRequest) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoItem not implemented")
}
func (UnimplementedTodoServer) UpdateTodoItem(context.Context, *UpdateTodoItemRequest) (*TodoItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoItem not implemented")
}
func (UnimplementedTodoServer) DeleteTodoItem(context.Context, *TodoItemId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoItem not implemented")
}
func (UnimplementedTodoServer) MakeTodoItemDone(context.Context, *TodoItemId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTodoItemDone not implemented")
}
func (UnimplementedTodoServer) mustEmbedUnimplementedTodoServer() {}

// UnsafeTodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServer will
// result in compilation errors.
type UnsafeTodoServer interface {
	mustEmbedUnimplementedTodoServer()
}

func RegisterTodoServer(s grpc.ServiceRegistrar, srv TodoServer) {
	s.RegisterService(&Todo_ServiceDesc, srv)
}

func _Todo_GetTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).GetTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_GetTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).GetTodoItem(ctx, req.(*TodoItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_ListTodoItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).ListTodoItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_ListTodoItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).ListTodoItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_CreateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).CreateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_CreateTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).CreateTodoItem(ctx, req.(*CreateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_UpdateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).UpdateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_UpdateTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).UpdateTodoItem(ctx, req.(*UpdateTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_DeleteTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).DeleteTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_DeleteTodoItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).DeleteTodoItem(ctx, req.(*TodoItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todo_MakeTodoItemDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).MakeTodoItemDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todo_MakeTodoItemDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).MakeTodoItemDone(ctx, req.(*TodoItemId))
	}
	return interceptor(ctx, in, info, handler)
}

// Todo_ServiceDesc is the grpc.ServiceDesc for Todo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodoItem",
			Handler:    _Todo_GetTodoItem_Handler,
		},
		{
			MethodName: "ListTodoItems",
			Handler:    _Todo_ListTodoItems_Handler,
		},
		{
			MethodName: "CreateTodoItem",
			Handler:    _Todo_CreateTodoItem_Handler,
		},
		{
			MethodName: "UpdateTodoItem",
			Handler:    _Todo_UpdateTodoItem_Handler,
		},
		{
			MethodName: "DeleteTodoItem",
			Handler:    _Todo_DeleteTodoItem_Handler,
		},
		{
			MethodName: "MakeTodoItemDone",
			Handler:    _Todo_MakeTodoItemDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
